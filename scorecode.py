#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright 2018 theloop Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import sys
from os.path import dirname, join, abspath

from loopchain.tools.score_helper import ScoreHelper

dir_path = dirname(abspath(__file__))
sys.path.append(dir_path)

# Basic SCORE helper classes.
from scoretool import ScoreHelperDatabase, SCOREResponse


class SCOREBusinessLogic:
    """User own SCORE implementation.
    DO NOT CHANGE THIS MODULE NAME.
    Implement your module in this class.
    """

    # User can use several DB instances.
    __db = None

    def __init__(self):
        # User can use several DB instances.
        self.__db = ScoreHelperDatabase("MY_OWN_DB", ScoreHelper())

    def regulate_point(self, log_func, id, params: dict, block=None):
        """Invoke example function. USE AS REFERENCE. KEEP THIS FUNCTION ARGUMENTS IN YOUR OWN FUNCTIONS.

        In this example, we'll concatenate arguments in a string.

        :param log_func: log function. use like this: log_func("message").
        :type score_db: ScoreHelperDatabase
        :param score_db: SCORE DB utility module
        :param params: parameters from the Tx
        :param block: block data
        :return Dictionary generated by SCOREResponse class.
        """

        uid = params["uid"]
        amount = params["amount"]

        int_amount = int(amount) # str({integer})
        amount_from_db = 0
        try:
            amount_from_db = int(self.__db.get_in_invoke(uid.encode()).decode())
        except:
            amount_from_db = 0
        
        added_amount = amount_from_db+int_amount
        
        if added_amount < 0 :
            return SCOREResponse.exception("amount cannot be negative.")
        
        added_amount = str(added_amount)

        try:
            self.__db.put(uid.encode(), added_amount.encode())
        except TypeError:
             return SCOREResponse.exception("key or value is not byte-like data.")
       
        log_func("added score : "+added_amount)
        try:
            amount_from_db = self.__db.get_in_invoke(uid.encode())
            if added_amount != amount_from_db.decode():
                return SCOREResponse.exception("Internal DB error.")
        # Handle exceptions.
        except TypeError:
            return SCOREResponse.exception("Key or value is not byte-like data.")

        except KeyError:
            return SCOREResponse.exception("DB do not Have such a key.")

        # Succeed to operate. Return successful message.
        log_func("Succeed to execute give_point.")
        return SCOREResponse.succeed()
     
    
    def give_point_to_another(self, log_func, id, params: dict, block=None):
        """Invoke example function. USE AS REFERENCE. KEEP THIS FUNCTION ARGUMENTS IN YOUR OWN FUNCTIONS.

        In this example, we'll concatenate arguments in a string.

        :param log_func: log function. use like this: log_func("message").
        :type score_db: ScoreHelperDatabase
        :param score_db: SCORE DB utility module
        :param params: parameters from the Tx
        :param block: block data
        :return Dictionary generated by SCOREResponse class.
        """

        # Use id as key.
        from_id = params["from_id"]
        to_id = params["to_id"]
        amount = params["amount"]
        int_amount = int(amount)
        from_id_point = 0
        to_id_point = 0
        if int_amount < 0 : 
            return SCOREResponse.exception("amount cannot be negative.")

        try:
            try:
                from_id_point = self.__db.get_in_invoke(from_id.encode()).decode()
            except:
                return SCOREResponse.exception("from_id is not registered.")

            from_id_point = int(from_id_point)
            if from_id_point < int_amount: 
                return SCOREResponse.exception("point is not remainded")
            from_id_point -= int_amount
            try:
                to_id_point = self.__db.get_in_invoke(to_id.encode()).decode()
            except:
                return SCOREResponse.exception("to_id is not registered.")

            to_id_point = int(to_id_point)
            to_id_point += int_amount
            self.__db.put(from_id.encode(), str(from_id_point).encode())
            self.__db.put(to_id.encode(), str(to_id_point).encode())

        except TypeError:
            return SCOREResponse.exception("Internal DB Error.")

        # Validate key and value.
        try:
            toPoint_from_db = self.__db.get_in_invoke(to_id.encode())
            fromPoint_from_db = self.__db.get_in_invoke(from_id.encode())

            if str(from_id_point) != fromPoint_from_db.decode() :
                return SCOREResponse.exception("Internal DB error.")
            if str(to_id_point) != toPoint_from_db.decode() :
                return SCOREResponse.exception("Internal DB error.")
        # Handle exceptions.
        except TypeError:
            return SCOREResponse.exception("Key or value is not byte-like data.")

        except KeyError:
            return SCOREResponse.exception("DB do not Have such a key.")

        # Succeed to operate. Return successful message.
        log_func("Succeed to execute give_point_to_another!")
        return SCOREResponse.succeed()

    # TODO: Add your function for invoke operation.

    def get_point(self, log_func, id, params):
        """Query example function. USE AS REFERENCE. KEEP THIS FUNCTION ARGUMENTS IN YOUR OWN FUNCTIONS.

        In this example, we'll look up value by key in params.

        :param log_func: log function. use like this: log_func("message").
        :type score_db: ScoreHelperDatabase
        :param score_db: SCORE DB utility module
        :param params: parameters from the Tx
        :param id: id of JSON RPC 2.0 request
        :return Dictionary generated by SCOREResponse class.
        """

        uid = params["uid"]
        log_func("Begin get_point.")

        try:
            data = self.__db.get_in_query(uid.encode())
            result = {"data": data.decode()}
            log_func(f'Queried data: {result}')
            return SCOREResponse.succeed("Succeed to query.", result)

        except TypeError:
            return SCOREResponse.exception("Key or value is not byte-like data.")

        except KeyError:
            return SCOREResponse.exception("DB do not Have such a key.")

    # TODO: Add your function for query operation.
